read.csv("emp.csv")
read.table("emp.txt", header = T, sep = " ")
read.table("emp.csv", header = T, sep = ",")
### 실습
read.delim("AWS_sample.txt")
### read.csv(), read.delim(), read.table()
getwd()
read.csv("../data/emp.csv")
setwd("../data")
getwd()
read.csv("emp.csv")
read.table("emp.txt", header = T, sep = " ")
read.table("emp.csv", header = T, sep = ",")
### 실습
read.delim("AWS_sample.txt")
### 실습
aws = read.delim("AWS_sample.txt", sep="#")
aws
View(aws)
aws[1, 1]
x1 <- aws[1:3, 2:4]
x1
x2 <- aws[9:11, 2:4]
x2
cbind(x1, x2)
rbind(x1, x2)
aws[, 1]
aws[, 1]
aws$AWS_ID
aws$AWS_ID
aws$AWS_ID
# 구조 확인
str(aws)
# 기본 통계량
summary(aws)
### 주요 함수들
# apply
df <- data.frame(x = c(1:5), y = seq(1, 10, 2))
df
df
### 주요 함수들
# apply
df <- data.frame(x = c(1:5), y = seq(1, 10, 2), z = c("a", "b", "c", "d", "e"))
df
apply(df[,c(1, 2)], 1, sum)
apply(df[,c(1, 2)], 1, sum)
apply(df[,c(1, 2)], 2, sum)
# subset
df
x1 <- subset(df, x>=3)
x1
x2 <- subset(df, x>=2 & y <= 6)
x2
# 병합 : merge
height <- data.frame(id=c(1, 2), h=c(180, 175))
weight <- data.frame(id=c(1, 2), h=c(80, 75))
merge(height, weight, by.x="id", by.y="id")
(v <- c(1:12))
array(v, c(4, 2, 3))
arr[,,1]
arr[,,1]
(v <- c(1:12))
arr <- array(v, c(4, 2, 3)) # (행, 열, 면)
arr[,,1]
arr[2, 1 ,1]
arr[, , 2][2, 1]
arr <- array(v, c(4, 2, 3)) # (행, 열, 면)
arr[,, 1]
arr[,, 2]
arr[2, 1 ,1]
arr[, , 2][2, 1]
x1 <- 1
x2 <- data.frame(varl=c(1, 2, 3), var2=c('a', 'b', 'c'))
x3 <- matrix(c(1:12), ncol=2)
x4 <- array(1:20, dim=c(2, 5, 2))
x1 <- 1
x2 <- data.frame(varl=c(1, 2, 3), var2=c('a', 'b', 'c'))
x3 <- matrix(c(1:12), ncol=2)
x4 <- array(1:20, dim=c(2, 5, 2))
x5 <- list(c1=x1, c2=x2, c3=x3, c4=x4)
x5
##### list #####
x1 <- 1
x2 <- data.frame(varl=c(1, 2, 3), var2=c('a', 'b', 'c'))
x3 <- matrix(c(1:12), ncol=2)
x4 <- array(1:20, dim=c(2, 5, 2))
x5 <- list(c1=x1, c2=x2, c3=x3, c4=x4)
x5
x5$c1
x5$c2
list1 <- list(c("lee", "kim"), "유비", 95)
list1
list1[1]
list1[[1]]
list1[[1]][1]
list1[[1]][2]
list("lee", "이순신", 95)
un = unlist(list2)
un
list2 = list("lee", "이순신", 95)
list2
un = unlist(list2)
un
### apply(), lapply(), sapply()
(a1 <- c(1:5))
apply(a1, max)
lapply(a1, max)
(a1 <- c(1:5))
apply(a1, max)
lapply(a1, max)
(a1 <- c(1:5))
apply(a1, max)
lapply(a1, max)
a2 <- list(c(1:5))
a3 <- list(c(6:10))
a4 <- c(a2, a3)
a4
apply(a4, max)
lapply(a4, max)
x <- lapply(a4, max)
(x <- unlist(x))
sapply(a4, max)
install.packages("dplyr")
library(dplyr)
aws = read.delim("AWS_sample.txt", sep="#")
aws
View(aws)
aws[1, 1]
x1 <- aws[1:3, 2:4]
x1
x2 <- aws[9:11, 2:4]
x2
cbind(x1, x2)
rbind(x1, x2)  # 적합
aws[, 1]
aws$AWS_ID
(v <- c(1:12))
arr <- array(v, c(4, 2, 3)) # (행, 열, 면)
arr[,, 1]
arr[,, 2]
arr[2, 1 ,1]
arr[, , 2][2, 1]
# 데이터 준비
exam <- read.csv("../data/csv_exam.csv")
exam
# 1반 학생들의 데이터 추출
exam[exam["class"] == "1", ]
exam[exam$"class" == "1", ]
subset(exam, class)
subset(exam, class == "1")
filter(exam, class == "1")
exam %>% filter(class == "1")
# 2반이면서 영어점수가 80점 이상인 데이터 추출
exam[exam$class == 2 & exam$english >= 80, ]
exam %>% filter(class==2 & english >= 80)
# 1, 3, 5에 해당하는 데이터만 추출
filter(exam, class == c("1", "3", "5"))
# 1, 3, 5에 해당하는 데이터만 추출
filter(exam, class in c("1", "3", "5"))
# 1, 3, 5에 해당하는 데이터만 추출
filter(exam, class %in% c("1", "3", "5"))
# 1, 3, 5에 해당하는 데이터만 추출
filter(exam, class %in% c(1, 3, 5))
##### select() #####
# 수학점수만 추출
exam[,3]
exam["math"]
exam %>% select(math)
# 반, 수학, 영어점수 추출
exam[, c("class", "math", "english")]
exam %>% select(class, math, english)
# 수학점수를 제외한 나머지 칼럼 추출
exam %>% select(-math)
exam %>% filter(class == 1) %>% select(class, math
exam %>% filter(class == 1) %>% select(class, math)
exam %>% filter(class == 1) %>% select(class, math) %>% head(2)
mpg
# mpg데이터
install.packages("ggplot2")
library(ggplot2)
mpg <- ggplot2::mpg
mpg
##### arrange() #####
exam %>% arrange(math)
exam %>% arrange(desc(math))
exam %>% arrange(class, math)
##### mutate() #####
exam$sum <- exam$math + exam$english + exam$science
exam
##### mutate() #####
exam$sum <- exam$math + exam$english + exam$science
exam
exam$mean <- exam$sum / 3
exam
exam <- exam[, -c(6, 7)]
exam
exam %>% mutate(sum = math + english + science)
exam %>% mutate(sum = math + english + science)
exam
##### summarize() #####
exam %>% summarise(mean_math=mean(math))
##### summarize() #####
exam %>% summarise(mean_math=mean(math), mean_eng=mean(english))
##### group_by() #####
exam %>% group_by(class) %>% summarise(mean_math=mean(math), mean_eng=mean(english),
median_math=median(math), count = n())
##### left_join(), bind_rows() #####
test1 <- data.frame(id = c(1, 2, 3, 4, 5), midterms = c(60, 70, 80, 90, 85))
test2 <- data.frame(id = c(1, 2, 3, 4, 5), midterms = c(70, 83, 65, 95, 80))
left_join(test1, test2, by="id")
bind_rows(test1, test2)
##### 실습 #####
mpg
##### 실습 #####
mpg <- as.data.frame(mpg)
mpg
head(mpg)
tail(mpg)
str(mpg)
names(mpg)
dim(mpg)
view(mpg)
names(mpg)
dim(mpg)
View(mpg)
### 배기량(displ)이 4이하인 차량의 모델명, 배기량, 생산년도를 조회
mpg %>% filter(displ <= 4) %>% select(model, displ, year)
### 통합 연비 파생변수를 만들기(total)
### 통합연비 : (ctr + hwy) / 2
mpg %>%  mutate(total = cty + hwy / 2) %>% arrange(desc(total)) %>% head(3)
### 통합연비로 내림차순 정렬한 뒤에 뒤에서
mpg %>% mutate(total = (cty+hwy)/2) %>% arrange(by="total") %>% tail(3)
### 통합 연비 파생변수를 만들기(total)
### 통합연비 : (ctr + hwy) / 2
### 통합연비로 내림차순 정렬한 뒤에 뒤에서 3개의 행만 선택해서 조회
mpg1 <- mpg %>% mutate(total = (cty+hwy)/2) %>% arrange(desc(total))
mpg1 %>% head(3)
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>% filter(class <= "suv")
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>% filter(class == "suv")
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>% filter(class == "suv") %>% mutate(total = (cty+hwy)/2)
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>% filter(class == "suv") %>% group_by(manufacturer) %>% mutate(total = (cty+hwy)/2)
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>% filter(class == "suv") %>% group_by(manufacturer)
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg1 %>% filter(class == "suv") %>% group_by(manufacturer) %>% summarise(mean_total=mean(total))
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total=(cty+hwy)/2) %>%
arrange(desc(mean_total))
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total=mean((cty+hwy)/2)) %>%
arrange(desc(mean_total))
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total=mean(cty+hwy)/2) %>%
arrange(desc(mean_total))
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total=(cty+hwy)/2) %>%
arrange(desc(mean_total))
### 어떤 회사의 hwy연비가 가장 높은지 알아보려고 한다.
### hwy평균이 가장 높은 회사 세곳을 조회
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(1)
### 회사별로 "suv"차량의 도시 및 고속도로 통합연비로 평균을 구해
### 내림차순으로 정렬하고 1~5위까지 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total=(cty+hwy)/2) %>%
arrange(desc(mean_total)) %>%
head(5)
### 어떤 회사의 hwy연비가 가장 높은지 알아보려고 한다.
### hwy평균이 가장 높은 회사 세곳을 조회
mpg %>%
group_by(manufacturer) %>%
summarise(mean_hwy=mean(hwy)) %>%
arrange(desc(mean_hwy)) %>%
head(3)
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(count = n()) %>%
head(5)
### 어떤 회사에서 compact(경차) 차종을 가장 많이 생산하는지 알아보려고 한다.
### 각 회사별 경차 차종 수를 내림차순으로 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(desc(count = n())) %>%
head(5)
### 어떤 회사에서 compact(경차) 차종을 가장 많이 생산하는지 알아보려고 한다.
### 각 회사별 경차 차종 수를 내림차순으로 조회
mpg %>%
group_by(manufacturer) %>%
filter(class == "compact") %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
head(5)
### 연료별 가격을 구해서 새로운 데이터프레임(fuel)으로 만든 후
### 기존 데이터셋(mpg)와 병합하여 조회
### c:CNG=2.35, d:Disel=2.38, e=Ethanol=2.11, p:Premium=2.76, r:Regular=2.22
unique(mpg$fi)
fuel <- data.frame(fl = c("p", "r", "e", "d", "c"),
price_fl=c(2.76, 2.22, 2.11, 2.38, 2.35))
fuel
unique(mpg$fl)
fuel <- data.frame(fl = c("p", "r", "e", "d", "c"),
price_fl=c(2.76, 2.22, 2.11, 2.38, 2.35))
fuel
mpg_fl <- left_join(mpg, fuel, by="fl")
mpg_fl
### 연료별 가격을 구해서 새로운 데이터프레임(fuel)으로 만든 후
### 기존 데이터셋(mpg)와 병합하여 조회
### c:CNG=2.35, d:Disel=2.38, e=Ethanol=2.11, p:Premium=2.76, r:Regular=2.22
unique(mpg$fl)
fuel <- data.frame(fl = c("p", "r", "e", "d", "c"),
price_fl=c(2.76, 2.22, 2.11, 2.38, 2.35))
fuel
mpg_fl <- left_join(mpg, fuel, by="fl")
mpg_fl
a <- scan()
b <- scan(what = character())
b
df <- data.frame()
df <- edit(df)
df
a <- scan()
b <- scan(what = character())
df <- data.frame()
df <- edit(df)
df
a <- scan()
##### 조건문 #####
a <- scan()
a
b <- scan(what = character())
b
df <- data.frame()
df <- edit(df)
df
a <- scan()
print("10보다 작다")
}else{
print("10보다 크다")
}
a <- scan()
print("10보다 작다")
}else{
print("10보다 크다")
}
a <- scan()
if(a < 10){
print("10보다 작다")
}else{
print("10보다 크다")
}
if(a >= 10){
print("A")
}else if(a >= 9){
print("B")
}else if(a >= 8){
print("C")
}
mpg$test <- ifelse(mpg$total, "pass", "fail")
mpg
mpg1$test <- ifelse(mpg$total, "pass", "fail")
mpg1
mpg1$test <- ifelse(mpg$total >= 20, "pass", "fail")
mpg1
mpg1 <- mpg %>% mutate(total = (cty+hwy)/2) %>% arrange(desc(total))
mpg1 %>% head(3)
mpg1$test <- ifelse(mpg$total >= 20, "pass", "fail")
mpg1
mpg1$test <- ifelse(mpg1$total >= 20, "pass", "fail")
mpg1
mpg1 %>% mutate(test2 = case_when(total < 20 ~ "fail". totla >= 20))
mpg1 %>% mutate(test2 = case_when(total < 20 ~ "fail", total >= 20 ~ "pass"))
### 통합연비 등급을 A, B, C 세 등급으로 나누는 파생변수 추가(grade)
### 30이상이면 A, 20~29이면 B, 20미만이면 C등급으로 분류
mpg1$grade <- ifelse(mpg1$total >= 30, "A", ifelse(mpg1$total>=20, "B", "C"))
mpg1
mpg1$grade <- case_when(mpg1$total >= 30 ~ "A",
mpg1$total >= 20 ~ "B",
mpg1$total <10 ~ "C")
mpg1
### 통합연비 등급을 A, B, C 세 등급으로 나누는 파생변수 추가(grade)
### 30이상이면 A, 20~29이면 B, 20미만이면 C등급으로 분류
mpg1$grade <- ifelse(mpg1$total >= 30, "A", ifelse(mpg1$total>=20, "B", "C"))
mpg1
# midwest 데이터
midwest
# midwest 데이터
str(midwest)
# midwest 데이터
midwest <- ggplot2::midwest
str(midwest)
y <- c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5)
plot(y)
x <- 1:10
y <- 1:10
ploy(x, y)
x <- 1:10
y <- 1:10
plot(x, y)
plot(s, y, xlim=c(0, 20), ylim=c(0, 30), main="Graph", type="l")
plot(x, y, xlim=c(0, 20), ylim=c(0, 30), main="Graph", type="l")
plot(x, y, xlim=c(0, 25), ylim=c(0, 35), main="Graph", type="l")
plot(x, y, xlim=c(0, 15), ylim=c(0, 15), main="Graph", type="l")
plot(x, y, xlim=c(0, 15), ylim=c(0, 15), main="Graph", type="p",
pch=1, cex=.3)
plot(x, y, xlim=c(0, 15), ylim=c(0, 15), main="Graph", type="p",
pch=1, cex=.8)
plot(x, y, xlim=c(0, 15), ylim=c(0, 15), main="Graph", type="p",
pch=1, cex=.8, col="red", lty="solid")
"lty = solid, dashed, dotted, dotdash, longdash, twodash"
plot(x, y, xlim=c(0, 15), ylim=c(0, 15), main="Graph", type="l",
pch=1, cex=.8, col="red", lty="dashed")
cars
str(cars)
plot(cars)
plot(cars, type="o")
tapply(cars$dist, cars$speed, mean)
# 같은 속도일대 제동거리가 다를 경우 대체적인 추세를 알기 어렵다.
# 속도별 제동거리의 평균을 구해 그래프로 그려보자.
mean_cars <- tapply(cars$dist, cars$speed, mean)
plot(mean_cars, type="o")
plot(mean_cars, type="o", xlab = "speed", ylab = "dist")
### points()
head(iris)
plot(iris$Sepal.Width, iris$Sepal.Length)
plot(iris$Petal.Width, iris$Petal.Length)
with(iris, plot(Sepal.Width, Sepal.Length))
with(iris, {
plot(Sepal.Width, Sepal.Length),
plot(Petal.Width, Petal.Length)
})
with(iris, points(Petal.Width, Petal.Length))
plot(cars)
lines(cars)
##### 그래프 배열 #####
head(mtcars)
str(mtcars)
# 4개의 그래프를 동시에 그리기
par(mfrow = c(2, 2))
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$disp)
hist(mtcars$wt)
boxplot(mtcars$wt)
par(mfrow = c(1, 1))
# 행 또는 열마다 그래프 개수를 다르게 설정
?layout
# 행 또는 열마다 그래프 개수를 다르게 설정
?layout
layout(matrix(c(1, 1, 2, 3), 2, 2, byrow=T))
plot(mtcars$wt, mtcars$mpg)
plot(mtcars$wt, mtcars$disp)
hist(mtcars$wt)
### arrows
x <- c(1, 3, 6, 8, 9)
y <- c(12, 56, 78, 32, 9)
plot(x, y)
par(mfrow = c(1, 1))
x <- c(1, 3, 6, 8, 9)
y <- c(12, 56, 78, 32, 9)
plot(x, y)
arrows(3, 56, 1, 12)
text(4, 40, "이것은 샘플", srt = 63)
text(4, 40, "이것은 샘플", srt = 65)
plot(x, y)
arrows(3, 56, 1, 12) # (3, 56) -> (1, 12)
text(4, 40, "이것은 샘플", srt = 65)
arrows(3, 56, 1, 12) # (3, 56) -> (1, 12)
text(4, 40, "이것은 샘플", srt = 64)
plot(x, y)
arrows(3, 56, 1, 12) # (3, 56) -> (1, 12)
text(4, 40, "이것은 샘플", srt = 64)
### 꽃잎 그래프
x <- c(1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 6, 6)
y <- c(2, 1, 4, 2, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1)
plot(x, y)
sunflowerplot(x, y)
### 별 그래프
# 데이터의 전체적인 윤곽을 살펴보는 그래프
# 데이터 항목에 대한 변화의 정도를 한눈에 파악
str(mtcars)
